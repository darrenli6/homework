/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  PayableOverrides,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Treasury, TreasuryInterface } from "../Treasury";

const _abi = [
  {
    inputs: [],
    stateMutability: "payable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "deposit",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "deposits",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "getBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "total",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "withdrawAll",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x608060405261002061001561009460201b60201c565b61009c60201b60201c565b34600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461006f9190610199565b9250508190555034600260008282546100889190610199565b925050819055506101ef565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006101a482610160565b91506101af83610160565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156101e4576101e361016a565b5b828201905092915050565b610d38806101fe6000396000f3fe60806040526004361061008a5760003560e01c80638da5cb5b116100595780638da5cb5b14610187578063d0e30db0146101b2578063f2fde38b146101bc578063f8b2cb4f146101e5578063fc7e286d1461022257610100565b80632ddbd13a146101055780632e1a7d4d14610130578063715018a614610159578063853828b61461017057610100565b366101005734600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546100de91906108df565b9250508190555034600260008282546100f791906108df565b92505081905550005b600080fd5b34801561011157600080fd5b5061011a61025f565b6040516101279190610944565b60405180910390f35b34801561013c57600080fd5b5061015760048036038101906101529190610990565b610265565b005b34801561016557600080fd5b5061016e6103d4565b005b34801561017c57600080fd5b5061018561045c565b005b34801561019357600080fd5b5061019c6105a4565b6040516101a991906109fe565b60405180910390f35b6101ba6105cd565b005b3480156101c857600080fd5b506101e360048036038101906101de9190610a45565b610681565b005b3480156101f157600080fd5b5061020c60048036038101906102079190610a45565b610779565b6040516102199190610944565b60405180910390f35b34801561022e57600080fd5b5061024960048036038101906102449190610a45565b6107c2565b6040516102569190610944565b60405180910390f35b60025481565b80600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156102e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102de90610acf565b60405180910390fd5b80600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546103369190610aef565b92505081905550806002600082825461034f9190610aef565b9250508190555060003373ffffffffffffffffffffffffffffffffffffffff168260405161037c90610b54565b60006040518083038185875af1925050503d80600081146103b9576040519150601f19603f3d011682016040523d82523d6000602084013e6103be565b606091505b50509050806103d0576103cf610b69565b5b5050565b6103dc6107da565b73ffffffffffffffffffffffffffffffffffffffff166103fa6105a4565b73ffffffffffffffffffffffffffffffffffffffff1614610450576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161044790610be4565b60405180910390fd5b61045a60006107e2565b565b6104646107da565b73ffffffffffffffffffffffffffffffffffffffff166104826105a4565b73ffffffffffffffffffffffffffffffffffffffff16146104d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104cf90610be4565b60405180910390fd5b60003373ffffffffffffffffffffffffffffffffffffffff1660025460405161050090610b54565b60006040518083038185875af1925050503d806000811461053d576040519150601f19603f3d011682016040523d82523d6000602084013e610542565b606091505b505090506000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600281905550806105a1576105a0610b69565b5b50565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60003411610610576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060790610c50565b60405180910390fd5b34600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461065f91906108df565b92505081905550346002600082825461067891906108df565b92505081905550565b6106896107da565b73ffffffffffffffffffffffffffffffffffffffff166106a76105a4565b73ffffffffffffffffffffffffffffffffffffffff16146106fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106f490610be4565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561076d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161076490610ce2565b60405180910390fd5b610776816107e2565b50565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60016020528060005260406000206000915090505481565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006108ea826108a6565b91506108f5836108a6565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561092a576109296108b0565b5b828201905092915050565b61093e816108a6565b82525050565b60006020820190506109596000830184610935565b92915050565b600080fd5b61096d816108a6565b811461097857600080fd5b50565b60008135905061098a81610964565b92915050565b6000602082840312156109a6576109a561095f565b5b60006109b48482850161097b565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006109e8826109bd565b9050919050565b6109f8816109dd565b82525050565b6000602082019050610a1360008301846109ef565b92915050565b610a22816109dd565b8114610a2d57600080fd5b50565b600081359050610a3f81610a19565b92915050565b600060208284031215610a5b57610a5a61095f565b5b6000610a6984828501610a30565b91505092915050565b600082825260208201905092915050565b7f7769746864726177206661696c65640000000000000000000000000000000000600082015250565b6000610ab9600f83610a72565b9150610ac482610a83565b602082019050919050565b60006020820190508181036000830152610ae881610aac565b9050919050565b6000610afa826108a6565b9150610b05836108a6565b925082821015610b1857610b176108b0565b5b828203905092915050565b600081905092915050565b50565b6000610b3e600083610b23565b9150610b4982610b2e565b600082019050919050565b6000610b5f82610b31565b9150819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000610bce602083610a72565b9150610bd982610b98565b602082019050919050565b60006020820190508181036000830152610bfd81610bc1565b9050919050565b7f6465706f736974206661696c6564000000000000000000000000000000000000600082015250565b6000610c3a600e83610a72565b9150610c4582610c04565b602082019050919050565b60006020820190508181036000830152610c6981610c2d565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000610ccc602683610a72565b9150610cd782610c70565b604082019050919050565b60006020820190508181036000830152610cfb81610cbf565b905091905056fea2646970667358221220c42ab07a7495bd4c31ef3ee63bff343ea5eeb01a162de93878bcb43197df0c7764736f6c63430008090033";

type TreasuryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TreasuryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Treasury__factory extends ContractFactory {
  constructor(...args: TreasuryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Treasury";
  }

  deploy(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<Treasury> {
    return super.deploy(overrides || {}) as Promise<Treasury>;
  }
  getDeployTransaction(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Treasury {
    return super.attach(address) as Treasury;
  }
  connect(signer: Signer): Treasury__factory {
    return super.connect(signer) as Treasury__factory;
  }
  static readonly contractName: "Treasury";
  public readonly contractName: "Treasury";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TreasuryInterface {
    return new utils.Interface(_abi) as TreasuryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Treasury {
    return new Contract(address, _abi, signerOrProvider) as Treasury;
  }
}
